@page "/movie/search"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using TrailerScope.Contracts.Services
@using TrailerScope.Domain.Entities

<h3>Search movies</h3>


<div style="max-width: 600px;">
	<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
		<DataAnnotationsValidator />
		<MudCard>
			<MudCardContent>
				<MudTextField T="string" Label="Movie title" Required="true" @bind-Value="model.SearchText" RequiredError="Movie title is required!" />
			</MudCardContent>
			<MudCardActions>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search</MudButton>
			</MudCardActions>
		</MudCard>
		<MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
			Fill out the form correctly to see the success message.
		</MudText>
	</EditForm>

</div>
<br />

@if (HaveMovies)
{
	<div>
		<h3>Result movies</h3>

		<ul>

			@foreach (var movieInfo in movies)
			{
				<li>@movieInfo.Title (@movieInfo.ReleaseYear) - @movieInfo.Description</li>
			}

		</ul>
	</div>
}


@code {

	//[Inject] IMovieInfoService _searchService { get; set; }
	[Inject] IMovieInfoService _searchService { get; set; }
	[Inject] ILogger<MovieSearch> logger { get; set; }

	//[Required,MinLength(1)] internal string SearchText { get; set; }
	internal SearchQuery model = new();

	bool formIsValid;
	string[] errors = { };
	MudForm form;
	IEnumerable<MovieInfo> movies;
	bool HaveMovies => movies != null && movies!.Any();

	private async Task OnValidSubmit(EditContext context)
	{
		await SearchMovies(model.SearchText);
		//success = true;
		StateHasChanged();
	}

	internal async Task SearchMovies(string title)
	{
		logger.LogInformation("got search request for title: {SearchText}", title);
		//if (!form.IsValid) return;

		var result = await _searchService.SearchByTitleAsync(title);

		logger.LogInformation("got response : {IsSuccess}", result.IsSuccess, result.Value);

		if (result.IsFailed)
		{
			formIsValid = false;
			errors = result.Errors.Select(x => x.Message).ToArray();
			logger.LogInformation("got reasons: {Reasons}", result.Reasons);

			return;
		}

		movies = result.Value;
	}

	internal class SearchQuery
	{
		[Required, MinLength(1)] internal string SearchText { get; set; }
	}

}
