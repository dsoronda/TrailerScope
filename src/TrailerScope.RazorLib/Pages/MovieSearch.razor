@page "/movie/search"
@using TrailerScope.Contracts.Services
@using TrailerScope.Domain.Entities

<h3>Search movies</h3>


<div style="max-width: 600px;">
	<MudCard>
		<MudCardContent>
			<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
				<MudTextField T="string" Label="Movie title" Required="true" @bind-Value="SearchText" RequiredError="Movie title is required!"/>
			</MudForm>
		</MudCardContent>
		<MudCardActions>
			<MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search" Color="Color.Info" @onclick="SearchMovies">Search</MudButton>

			@* <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton> *@
		</MudCardActions>
	</MudCard>

</div>
<br/>

@if (HaveMovies)
{
	<div>
		<h3>Result movies</h3>
		<ul>
			<li>movie</li>
		</ul>
	</div>
}


@code {

	[Inject]
	IMovieInfoService _searchService { get; set; }

	public string SearchText { get; set; }

	bool success;
	string[] errors = {};
	MudForm form;
	IEnumerable<MovieInfo> movies;
	bool HaveMovies => movies != null && movies!.Any();

	internal async Task SearchMovies()
	{
		if (!form.IsValid) return;

		var result = await _searchService.SearchByTitleAsync(SearchText);
		if (result.IsFailed)
		{
			success = false;
			errors = result.Errors.Select(x => x.Message).ToArray();
			return;
		}

		movies = result.Value;
	}


}
