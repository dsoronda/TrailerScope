@page "/movies/search"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using TrailerScope.Contracts.Services
@using TrailerScope.Domain.Entities
@inject ISnackbar Snackbar


<h3>Search movies</h3>


<div style="max-width: 600px;">
	<EditForm Model="@model" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="InvalidSubmit">
		<DataAnnotationsValidator/>
		<MudCard>
			<MudCardContent>
				<MudTextField T="string" Label="Movie title" Required="true" @bind-Value="model.SearchText" RequiredError="Movie title is required!"/>
			</MudCardContent>
			<MudCardActions>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search</MudButton>
			</MudCardActions>
		</MudCard>
		<MudText Typo="Typo.body2" Align="Align.Center" Class="my-4">
			Fill out the form correctly to see the success message.
		</MudText>
	</EditForm>

</div>
<br/>

@if (HaveMovies)
{
	<div>
		<h3>Result movies</h3>

		<ul>

			@foreach (var movieInfo in movies)
			{
				<li>@movieInfo.Title (@movieInfo.ReleaseYear) - @movieInfo.Description</li>
			}

		</ul>
	</div>
}


@code {

	[Inject] Services.IWasmMovieSearchApiService _searchService { get; set; }

	[Inject] ILogger<MovieSearch> logger { get; set; }

	//[Required,MinLength(1)] internal string SearchText { get; set; }
	internal SearchQuery model = new();

	//MudForm form;
	IEnumerable<MovieInfo> movies;
	bool HaveMovies => movies != null && movies!.Any();

	private void InvalidSubmit(EditContext context)
	{
		Snackbar.Add($"Invalid submit trigered", Severity.Info);
	}


	private async Task OnValidSubmit(EditContext context)
	{
		// note : this is workaround when invalid submit trigers validsubmit
		if(!context.Validate() || string.IsNullOrWhiteSpace(model.SearchText)) return;

		await SearchMovies(model.SearchText);
	//success = true;
		StateHasChanged();
	}

	private async Task SearchMovies(string title)
	{
		logger.LogInformation("got search request for title: {SearchText}", title);

		var result = await _searchService.SearchByTitleAsync(title);

		logger.LogInformation("got response : {result.IsSuccess}", result.IsSuccess);

		if (result.IsSuccess && result.Value.Any())
		{
			movies = result.Value;
			return;
		}

		if (result.IsFailed)
		{
			logger.LogInformation("got reasons: {Reasons}", result.Reasons.First());
			Snackbar.Add($"Fail: Reason: {result.Reasons.First()}", Severity.Error);
		}

	// handle success with not found data
		Snackbar.Add($"Nothing found", Severity.Warning);
	}

	internal class SearchQuery
	{
		[Required, MinLength(1)]
		internal string SearchText { get; set; }
	}

}
