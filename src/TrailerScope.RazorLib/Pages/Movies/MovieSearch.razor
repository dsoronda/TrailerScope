@page "/movies/search"

<h3><MudIcon Icon="@Icons.Material.Outlined.Search" Title="Search"/>Search movies by title</h3>

<div style="max-width: 600px;">
	<EditForm Model="@model" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="InvalidSubmit">
		<DataAnnotationsValidator/>
		<MudCard>
			<MudCardContent>
				<MudTextField T="string" Label="Movie title" Required="true" @bind-Value="model.SearchText" RequiredError="Movie title is required!"/>
			</MudCardContent>
			<MudCardActions>
				<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Search</MudButton>
			</MudCardActions>
		</MudCard>

	</EditForm>

</div>
<br/>

@if (HaveMovies)
{
	<h3>Found movies</h3>

	<MudPaper Width="600px">
		<MudList Clickable="true">
			@foreach (MovieInfo movieInfo in movies)
			{
				<a href="/movies/info/@movieInfo.IMDbId">
					<MudListItem Text="@($"{movieInfo.Title} - ({movieInfo.Description})")" Icon="@Icons.Material.Filled.Movie"/>
				</a>
				@*<MudListItem Text="@($"{movieInfo.Title} - ({movieInfo.Description})")" Icon="@Icons.Material.Filled.Movie"/>*@
			}
		</MudList>
	</MudPaper>
}


@code {

	private void InvalidSubmit(EditContext context)
	{
		Snackbar.Add($"Invalid submit trigered", Severity.Info);
	}

	private async Task OnValidSubmit(EditContext context)
	{
	// note : this is workaround when invalid submit trigers validsubmit
		if (!context.Validate() || string.IsNullOrWhiteSpace(model.SearchText)) return;

		await SearchMovies(model.SearchText);
	//success = true;
		StateHasChanged();
	}

}
